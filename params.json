{
  "name": "Hannah8668.GitHub.io/mocha",
  "tagline": "初识 mocha in NodeJS",
  "body": "## 介绍 \r\n\r\nmocha 是一个功能丰富的javascript测试框架，可以运行在nodejs和浏览器环境，使异步测试变得简单有趣。mocha 串联运行测试，允许灵活和精确地报告结果，同时映射未捕获的异常用来纠正测试用例。\r\n\r\n支持TDD/BDD 的 开发方式，结合 should.js/expect/chai/better-assert 断言库，能轻松构建各种风格的测试用例。\r\n\r\n## 安装 \r\n\r\n通过npm全局安装：\r\n \r\n  ```  npm install -g mocha ```\r\n\r\n\r\n## first synonymous assert \r\n\r\n``` //模块依赖\r\nvar assert = require(\"assert\");\r\n//断言条件\r\ndescribe('Array', function(){\r\n    describe('#indexOf()', function(){\r\n        it('should return -1 when the value is not present', function(){\r\n            assert.equal(-1, [1,2,3].indexOf(5));\r\n            assert.equal(-1, [1,2,3].indexOf(0));\r\n        })\r\n    })\r\n}); \r\n```\r\n\r\n\r\n\r\n**describe (moduleName, testDetails)**\r\n由上述代码可看出，describe是可以嵌套的，比如上述代码嵌套的两个describe就可以理解成测试人员希望测试Array模块下的#indexOf() 子模块。module_name 是可以随便取的，关键是要让人读明白就好。\r\n\r\n\r\n**it (info, function)**\r\n具体的测试语句会放在it的回调函数里，一般来说info字符串会写期望的正确输出的简要一句话文字说明。当该it block内的test failed的时候控制台就会把详细信息打印出来。一般是从最外层的describe的module_name开始输出（可以理解成沿着路径或者递归链或者回调链），最后输出info，表示该期望的info内容没有被满足。一个it对应一个实际的test case\r\n\r\n\r\n**assert.equal (exp1, exp2)**\r\n断言判断exp1结果是否等于exp2, 这里采取的等于判断是== 而并非 === 。即 assert.equal(1, ‘1’) 认为是True。这只是nodejs里的assert.js的一种断言形式，下文会提到同样比较常用的should.js。\r\n如果exp1和exp2均为字符串，字符串比较出错时则控制台会用颜色把相异的部分标出来。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}